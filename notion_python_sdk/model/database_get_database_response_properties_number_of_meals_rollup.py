# coding: utf-8

"""
    Notion API

    Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from notion_python_sdk import schemas  # noqa: F401


class DatabaseGetDatabaseResponsePropertiesNumberOfMealsRollup(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            rollup_property_name = schemas.StrSchema
            relation_property_name = schemas.StrSchema
            rollup_property_id = schemas.StrSchema
            relation_property_id = schemas.StrSchema
            function = schemas.StrSchema
            __annotations__ = {
                "rollup_property_name": rollup_property_name,
                "relation_property_name": relation_property_name,
                "rollup_property_id": rollup_property_id,
                "relation_property_id": relation_property_id,
                "function": function,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rollup_property_name"]) -> MetaOapg.properties.rollup_property_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relation_property_name"]) -> MetaOapg.properties.relation_property_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rollup_property_id"]) -> MetaOapg.properties.rollup_property_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relation_property_id"]) -> MetaOapg.properties.relation_property_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["function"]) -> MetaOapg.properties.function: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["rollup_property_name", "relation_property_name", "rollup_property_id", "relation_property_id", "function", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rollup_property_name"]) -> typing.Union[MetaOapg.properties.rollup_property_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relation_property_name"]) -> typing.Union[MetaOapg.properties.relation_property_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rollup_property_id"]) -> typing.Union[MetaOapg.properties.rollup_property_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relation_property_id"]) -> typing.Union[MetaOapg.properties.relation_property_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["function"]) -> typing.Union[MetaOapg.properties.function, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["rollup_property_name", "relation_property_name", "rollup_property_id", "relation_property_id", "function", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        rollup_property_name: typing.Union[MetaOapg.properties.rollup_property_name, str, schemas.Unset] = schemas.unset,
        relation_property_name: typing.Union[MetaOapg.properties.relation_property_name, str, schemas.Unset] = schemas.unset,
        rollup_property_id: typing.Union[MetaOapg.properties.rollup_property_id, str, schemas.Unset] = schemas.unset,
        relation_property_id: typing.Union[MetaOapg.properties.relation_property_id, str, schemas.Unset] = schemas.unset,
        function: typing.Union[MetaOapg.properties.function, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DatabaseGetDatabaseResponsePropertiesNumberOfMealsRollup':
        return super().__new__(
            cls,
            *args,
            rollup_property_name=rollup_property_name,
            relation_property_name=relation_property_name,
            rollup_property_id=rollup_property_id,
            relation_property_id=relation_property_id,
            function=function,
            _configuration=_configuration,
            **kwargs,
        )
