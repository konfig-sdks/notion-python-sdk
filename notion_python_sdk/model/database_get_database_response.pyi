# coding: utf-8

"""
    Notion API

    Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from notion_python_sdk import schemas  # noqa: F401


class DatabaseGetDatabaseResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def title() -> typing.Type['DatabaseGetDatabaseResponseTitle']:
                return DatabaseGetDatabaseResponseTitle
        
            @staticmethod
            def description() -> typing.Type['DatabaseGetDatabaseResponseDescription']:
                return DatabaseGetDatabaseResponseDescription
            object = schemas.StrSchema
            id = schemas.StrSchema
            created_time = schemas.StrSchema
            last_edited_time = schemas.StrSchema
        
            @staticmethod
            def icon() -> typing.Type['DatabaseGetDatabaseResponseIcon']:
                return DatabaseGetDatabaseResponseIcon
        
            @staticmethod
            def cover() -> typing.Type['DatabaseGetDatabaseResponseCover']:
                return DatabaseGetDatabaseResponseCover
            url = schemas.StrSchema
        
            @staticmethod
            def properties() -> typing.Type['DatabaseGetDatabaseResponseProperties']:
                return DatabaseGetDatabaseResponseProperties
        
            @staticmethod
            def parent() -> typing.Type['DatabaseGetDatabaseResponseParent']:
                return DatabaseGetDatabaseResponseParent
            archived = schemas.BoolSchema
            is_inline = schemas.BoolSchema
            public_url = schemas.AnyTypeSchema
            __annotations__ = {
                "title": title,
                "description": description,
                "object": object,
                "id": id,
                "created_time": created_time,
                "last_edited_time": last_edited_time,
                "icon": icon,
                "cover": cover,
                "url": url,
                "properties": properties,
                "parent": parent,
                "archived": archived,
                "is_inline": is_inline,
                "public_url": public_url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> 'DatabaseGetDatabaseResponseTitle': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> 'DatabaseGetDatabaseResponseDescription': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_edited_time"]) -> MetaOapg.properties.last_edited_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icon"]) -> 'DatabaseGetDatabaseResponseIcon': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cover"]) -> 'DatabaseGetDatabaseResponseCover': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> 'DatabaseGetDatabaseResponseProperties': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent"]) -> 'DatabaseGetDatabaseResponseParent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_inline"]) -> MetaOapg.properties.is_inline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public_url"]) -> MetaOapg.properties.public_url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "object", "id", "created_time", "last_edited_time", "icon", "cover", "url", "properties", "parent", "archived", "is_inline", "public_url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union['DatabaseGetDatabaseResponseTitle', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union['DatabaseGetDatabaseResponseDescription', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> typing.Union[MetaOapg.properties.created_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_edited_time"]) -> typing.Union[MetaOapg.properties.last_edited_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icon"]) -> typing.Union['DatabaseGetDatabaseResponseIcon', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cover"]) -> typing.Union['DatabaseGetDatabaseResponseCover', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union['DatabaseGetDatabaseResponseProperties', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> typing.Union['DatabaseGetDatabaseResponseParent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> typing.Union[MetaOapg.properties.archived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_inline"]) -> typing.Union[MetaOapg.properties.is_inline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public_url"]) -> typing.Union[MetaOapg.properties.public_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "object", "id", "created_time", "last_edited_time", "icon", "cover", "url", "properties", "parent", "archived", "is_inline", "public_url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union['DatabaseGetDatabaseResponseTitle', schemas.Unset] = schemas.unset,
        description: typing.Union['DatabaseGetDatabaseResponseDescription', schemas.Unset] = schemas.unset,
        object: typing.Union[MetaOapg.properties.object, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        created_time: typing.Union[MetaOapg.properties.created_time, str, schemas.Unset] = schemas.unset,
        last_edited_time: typing.Union[MetaOapg.properties.last_edited_time, str, schemas.Unset] = schemas.unset,
        icon: typing.Union['DatabaseGetDatabaseResponseIcon', schemas.Unset] = schemas.unset,
        cover: typing.Union['DatabaseGetDatabaseResponseCover', schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        properties: typing.Union['DatabaseGetDatabaseResponseProperties', schemas.Unset] = schemas.unset,
        parent: typing.Union['DatabaseGetDatabaseResponseParent', schemas.Unset] = schemas.unset,
        archived: typing.Union[MetaOapg.properties.archived, bool, schemas.Unset] = schemas.unset,
        is_inline: typing.Union[MetaOapg.properties.is_inline, bool, schemas.Unset] = schemas.unset,
        public_url: typing.Union[MetaOapg.properties.public_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DatabaseGetDatabaseResponse':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            object=object,
            id=id,
            created_time=created_time,
            last_edited_time=last_edited_time,
            icon=icon,
            cover=cover,
            url=url,
            properties=properties,
            parent=parent,
            archived=archived,
            is_inline=is_inline,
            public_url=public_url,
            _configuration=_configuration,
            **kwargs,
        )

from notion_python_sdk.model.database_get_database_response_cover import DatabaseGetDatabaseResponseCover
from notion_python_sdk.model.database_get_database_response_description import DatabaseGetDatabaseResponseDescription
from notion_python_sdk.model.database_get_database_response_icon import DatabaseGetDatabaseResponseIcon
from notion_python_sdk.model.database_get_database_response_parent import DatabaseGetDatabaseResponseParent
from notion_python_sdk.model.database_get_database_response_properties import DatabaseGetDatabaseResponseProperties
from notion_python_sdk.model.database_get_database_response_title import DatabaseGetDatabaseResponseTitle
