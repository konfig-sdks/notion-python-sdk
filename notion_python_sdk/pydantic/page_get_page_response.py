# coding: utf-8

"""
    Notion API

    Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from notion_python_sdk.pydantic.page_get_page_response_cover import PageGetPageResponseCover
from notion_python_sdk.pydantic.page_get_page_response_created_by import PageGetPageResponseCreatedBy
from notion_python_sdk.pydantic.page_get_page_response_icon import PageGetPageResponseIcon
from notion_python_sdk.pydantic.page_get_page_response_last_edited_by import PageGetPageResponseLastEditedBy
from notion_python_sdk.pydantic.page_get_page_response_parent import PageGetPageResponseParent
from notion_python_sdk.pydantic.page_get_page_response_properties import PageGetPageResponseProperties

class PageGetPageResponse(BaseModel):
    object: typing.Optional[str] = Field(None, alias='object')

    id: typing.Optional[str] = Field(None, alias='id')

    created_time: typing.Optional[str] = Field(None, alias='created_time')

    last_edited_time: typing.Optional[str] = Field(None, alias='last_edited_time')

    created_by: typing.Optional[PageGetPageResponseCreatedBy] = Field(None, alias='created_by')

    last_edited_by: typing.Optional[PageGetPageResponseLastEditedBy] = Field(None, alias='last_edited_by')

    cover: typing.Optional[PageGetPageResponseCover] = Field(None, alias='cover')

    icon: typing.Optional[PageGetPageResponseIcon] = Field(None, alias='icon')

    parent: typing.Optional[PageGetPageResponseParent] = Field(None, alias='parent')

    archived: typing.Optional[bool] = Field(None, alias='archived')

    properties: typing.Optional[PageGetPageResponseProperties] = Field(None, alias='properties')

    url: typing.Optional[str] = Field(None, alias='url')

    public_url: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='public_url')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
