# coding: utf-8

"""
    Notion API

    Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from notion_python_sdk.pydantic.database_get_database_response_cover import DatabaseGetDatabaseResponseCover
from notion_python_sdk.pydantic.database_get_database_response_description import DatabaseGetDatabaseResponseDescription
from notion_python_sdk.pydantic.database_get_database_response_icon import DatabaseGetDatabaseResponseIcon
from notion_python_sdk.pydantic.database_get_database_response_parent import DatabaseGetDatabaseResponseParent
from notion_python_sdk.pydantic.database_get_database_response_properties import DatabaseGetDatabaseResponseProperties
from notion_python_sdk.pydantic.database_get_database_response_title import DatabaseGetDatabaseResponseTitle

class DatabaseGetDatabaseResponse(BaseModel):
    title: typing.Optional[DatabaseGetDatabaseResponseTitle] = Field(None, alias='title')

    description: typing.Optional[DatabaseGetDatabaseResponseDescription] = Field(None, alias='description')

    object: typing.Optional[str] = Field(None, alias='object')

    id: typing.Optional[str] = Field(None, alias='id')

    created_time: typing.Optional[str] = Field(None, alias='created_time')

    last_edited_time: typing.Optional[str] = Field(None, alias='last_edited_time')

    icon: typing.Optional[DatabaseGetDatabaseResponseIcon] = Field(None, alias='icon')

    cover: typing.Optional[DatabaseGetDatabaseResponseCover] = Field(None, alias='cover')

    url: typing.Optional[str] = Field(None, alias='url')

    properties: typing.Optional[DatabaseGetDatabaseResponseProperties] = Field(None, alias='properties')

    parent: typing.Optional[DatabaseGetDatabaseResponseParent] = Field(None, alias='parent')

    archived: typing.Optional[bool] = Field(None, alias='archived')

    is_inline: typing.Optional[bool] = Field(None, alias='is_inline')

    public_url: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='public_url')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
